Rolls regular, non % rng, so primarily for just generating raw numbers.

Primarily in function: 801ae4c0



Outer and inner loop.
outer loop ++;
may call extra on lag frames.

inner increment reset to 0 each time outer loops, like standard.


Struct at 80478a6c:

Word: 0x28
Word; 0x1E

int start = 40;
int second = 30;
int secondSquare = 30^2 == 900
int halfstart = start/2
int halfSecond = second/2
THE RULE:
8*40*30 = 9600.

for (int i = 0; i<second;i++){
    for (int j = 0; j<start; j++;){
        Hidden in the if statements it clear that +4 rolls is guaranteed.
        4 calls minimum.
        8 min and 8 max total. 
        Is also a 2nd incremented value?
    }
}



Data located before camera struct relates to battle animations somehow. Seems like it might be some kind of visual effect on a move's animation. 


When blur happens, active status is set to 1, type is defined as a 4, and other value is 9.
Then a target of 1 is set for fade, but this doesn't happen until blur finishes.


Rotation may be in degrees. only goes up to 3.2 something.
two 4330 numbers are subtracted to get rotation progress. 

Fadeout types from 1-3 are reserved, and 4 and 5 are special. Especially 5.



Conditions for fade to begin: 
Fade Active : true && type of fade < 4 && type of fade != 0.



Gets a fixed amount to rotate by (2.5). When does fade start?

Phat RNG Func gets called assuming boolFadeActive % 256 != 0. If so, then some other functions run.


ALWAYS 7 Frames after pressing A the "start Battle" function begins. Contains ENTIRE battle.







Blur Data struct of params from 

0x804781f0
to 0x80478208

b 
b 
hw
w 
w 
w 
w 
w 
w